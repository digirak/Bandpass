import numpy as np
import matplotlib as mpl
mpl.rcParams['text.usetex']=True
mpl.rcParams['text.latex.unicode']=True
from matplotlib import pyplot as plt
from matplotlib.colors import LogNorm
freqs_st=150e+6
PI=np.pi
#freq resolution in Hz
df=40e+3
N=int((170e+6-freqs_st)/df)
freqs=freqs_st+np.arange(N)*df
#baseline resolution in m
freq_base=170e+6
dx=5
x=4+np.arange(400)*dx
base_lims=x.size
c=3e+8
alpha=1
beta=0.68
gamma=0.7
S_max=35
S=1
freqsp=freqs
epsilon=0.42
D=4
BW=freqs[N-1]-freqs[0]
S_max=S_max*np.power(21e-2,2)*1e-26/(2*1.38e-23*(2e-6))
S=S*np.power(21e-2,2)*1e-26/(2*1.38e-23*(2e-6))
u=x*freq_base/c
term1=alpha/(3-beta)
term2=(np.power(S_max,(3-beta))/np.power(S,-beta))*np.power((freqs/freq_base),(-2*gamma))
f_numat=np.zeros(N*N).reshape(N,N)
for ouLoop in range(N):
        for inLoop in range(N):
            f_numat[inLoop][ouLoop]=(freqs[inLoop]-freqsp[ouLoop])/freq_base

#plt.imshow(f_numat,cmap=plt.cm.rainbow)
#plt.colorbar()
#plt.show()

term3=np.zeros(N*N).reshape(N,N)

for iLoop in range(N):
    term3[:,iLoop]=2*PI*c**2*epsilon**2./(D**2*(freqs**2+freqs[iLoop]**2))

W=4*N
#N=W
numer=np.zeros(N*N*base_lims).reshape(N,N,base_lims)
terme=np.zeros(N*N*base_lims).reshape(N,N,base_lims)
expterm=np.zeros(N*N*base_lims).reshape(N,N,base_lims)
denom=np.zeros(N*N).reshape(N,N)

C_fg=np.zeros(N*N*base_lims).reshape(N,N,base_lims)
#C_fgbnone=np.zeros(N*N*base_lims).reshape(N,N,base_lims)
C_fgbn=np.zeros(N*N*base_lims).reshape(N,N,base_lims)

kk=np.zeros(N*N*base_lims).reshape(N,N,base_lims)
kk_bn=np.zeros(N*N*base_lims).reshape(N,N,base_lims)
kk_bh=np.zeros(N*N*base_lims).reshape(N,N,base_lims)

kkp=np.zeros(N*base_lims).reshape(N,base_lims)
kkp_bn=np.zeros(N*base_lims).reshape(N,base_lims)
kkp_bh=np.zeros(N*base_lims).reshape(N,base_lims)

kkpl=np.zeros(int(N/2)*base_lims).reshape(int(N/2),base_lims)
kkpl_bn=np.zeros(int(N/2)*base_lims).reshape(int(N/2),base_lims)
kkpl_bh=np.zeros(int(N/2)*base_lims).reshape(int(N/2),base_lims)

#blacknutt=0.3635819-0.4891775*np.cos(2*PI*np.arange(N)/(N))+0.1365995*np.cos(4*PI*np.arange(N)/(N))-0.0106411*np.cos(6*PI*np.arange(N)/(N))
#blacknutt=0.3635-0.4891*np.cos(2*PI*np.arange(N)/N-1)+0.1365995*np.cos(4*PI*np.arange(N)/N-1)
shift=0
blacknutt=0.3635819-0.4891775*np.cos(2*PI*np.arange(-shift,N-shift)/(N-1))+0.1365995*np.cos(4*PI*np.arange(-shift,N-shift)/(N-1))-0.0106411*np.cos(6*PI*np.arange(-shift,N-shift)/(N-1))
#blacknutt=0.3635819-0.4891775*np.cos(2*PI*f_numat/(N-1))+0.1365995*np.cos(4*PI*f_numat/(N-1))-0.0106411*np.cos(6*PI*f_numat/(N-1))
#BH=0.35875-0.48829*np.cos(2*PI*range(N)/(N-1))+0.14128*np.cos(4*PI*range(N)/(N-1))-0.01168*np.cos(6*PI*range(N)/(N-1))


for iLoop in range(N):
    denom[:,iLoop]=(freqs**2+freqsp[iLoop]**2)*D**2


for iLoop in range(base_lims):
    numer[:,:,iLoop]=-1*c**2*(f_numat*u[iLoop])**2*epsilon**2
    terme[:,:,iLoop]=np.exp(numer[:,:,iLoop]/denom[:,:])

for uLoop in range(base_lims):
      for fLoop in range(N):
            expterm[:,fLoop,uLoop]=term3[:,fLoop]*terme[:,fLoop,uLoop]
            C_fg[:,fLoop,uLoop]=term1*(term2)*expterm[:,fLoop,uLoop]
          #  C_fgbn[:,fLoop,uLoop]=C_fg[:,fLoop,uLoop]*blacknutt

   #         C_fgbh[:,fLoop,uLoop]=C_fg[:,fLoop,uLoop]*BHa
#

#C_fgbn=C_fg
for uLoop in np.arange(0,base_lims):
    for fLoop in range(N):
       # C_fgbn[fLoop,fLoop,uLoop]=C_fgbn[fLoop,fLoop,uLoop]*(blacknutt[fLoop])
     #   C_fgbn[:,fLoop,uLoop]=(C_fg[:,fLoop,uLoop]*np.transpose(blacknutt))
      #  temp=C_fg[:,fLoop,uLoop]
        C_fgbn[:,fLoop,uLoop]=C_fg[:,fLoop,uLoop]*(blacknutt)
#        C_fgbn[:,fLoop,uLoop]=temp*(blacknutt)

for uLoop in range(base_lims):
      for fLoop in range(N):
         C_fgbn[fLoop,:,uLoop]=C_fgbn[fLoop,:,uLoop]*np.transpose(blacknutt)

for uLoop in range(base_lims):
    kk[:,:,uLoop]=(BW*(abs(np.fft.fft2(C_fg[:,:,uLoop])))*2e-6)
    kk_bn[:,:,uLoop]=(BW*(abs(np.fft.fft2(C_fgbn[:,:,uLoop])))*2e-6)
  #  kk_bh[:,:,uLoop]=BW*abs(np.fft.fft2(C_fgbh[:,:,uLoop]))*2e-6
 #   kk[:,:,uLoop]=BW*abs(np.fft.fft2(C_fg[:,:,uLoop])*np.conj(np.fft.fft2(C_fg[:,:,uLoop])))*2e-6

#N=460-40
for fLoop in range(N):
        kkp[fLoop,:]=kk[fLoop,fLoop,:]
        kkp_bn[fLoop,:]=kk_bn[fLoop,fLoop,:]
 #          kkp_bh[fLoop,:]=kk_bh[fLoop,fLoop,:]
           
for fLoop in range(int(N/2)-1):
    kkpl[fLoop,:]=((abs(kkp[fLoop,:])+abs(kkp[N-fLoop-1,:]))/2)
    kkpl_bn[fLoop,:]=((abs(kkp_bn[fLoop,:])+abs(kkp_bn[N-fLoop-1,:]))/2)
 #   kkpl_bh[fLoop,:]=((abs(kkp_bn[fLoop,:])+abs(kkp_bh[N-fLoop-1,:]))/2)
BW=freqs[N-1]-freqs[0]
z=(1420e+6/freq_base)-1
etahalf=np.arange(-0.5/df,0.5/df,1/(BW))
eta=2*etahalf[etahalf.size/2+1:etahalf.size]
Ez=np.sqrt(0.27*(1+z)**3+0.73)
Dz=c*(1+z)**2/(Ez*1420e+6*70e+3)
kpar=2*PI*eta/(Dz)
kperp=2*PI*u/(Dz*freq_base)
#fig,ax=plt.subplots()
plt.figure('BN')
plt.pcolor(np.log10(abs(kkpl_bn)),cmap='jet')
#h1=ax.pcolor(np.log10(abs(kkpl[1:250,:])),cmap='jet')
plt.axis([1.81,base_lims,0.12,N])
cb=plt.colorbar()
cb.set_label('$\log_{10}(P_{k}) \mbox{ mK}^{2} h^{-3} \mbox{Mpc}^{3}$')
plt.xscale('log')
plt.yscale('log')
plt.xlabel('$k_{\perp}\mbox{ }h\mbox{ Mpc}^{-1}$')
plt.ylabel('$k_{\parallel}\mbox{ }h\mbox{ Mpc}^{-1}$')
plt.yticks([1,10,32],(0.01,0.3,1.0))
plt.xticks([1,10,base_lims],(0.001,0.01,0.1))
#ax.set_xticks([1,10,30])
#ax.set_yticks([1,10,99])
#ax.set_xticklabels([0.001,0.01,0.1])
#ax.set_yticklabels([0.1,0.3,3.5])
plt.title('With Taper')
#plt.savefig('/home/rakesh/Plots/Figure_1.svg',format='svg',dpi=1200)
plt.figure('REC')
plt.pcolor(np.log10(abs(kkpl[0:32,:]/1)),cmap='jet')
plt.axis([0.12,0.9,0.12,0.9])
cb1=plt.colorbar()
cb.set_label('$\log_{10}(P_{k}) \mbox{ mK}^{2} h^{-3} \mbox{Mpc}^{3}$')
plt.xscale('log')
plt.yscale('log')
plt.yticks([1,10,32],(0.01,0.3,1.0))
plt.xticks([1,10,base_lims],(0.001,0.01,0.1))
plt.xlabel('$k_{\perp}\mbox{ }h\mbox{ Mpc}^{-1}$')
plt.title('No Taper')
#ax.set_xticklabels([0.001,0.01,0.1])
#ax.set_yticklabels([0.1,0.3,3.5])

plt.show()


